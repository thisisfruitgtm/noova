generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// SQLite datasource for local development
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  passwordHash String?
  role       Role     @default(CRAFTER)
  city       String?
  county     String?
  username   String?  @unique
  socials    Json?
  brandKit   BrandKit?
  createdAt  DateTime @default(now())

  assets     Asset[]
  templates  Template[]
  posts      Post[]
  page       Page?
  messages   Message[]
  links      Link[]
  metrics    Metric[]
  products   ProductLite[]
  accounts   Account[]
  sessions   Session[]
}

enum Role {
  ADMIN
  MANAGER
  CRAFTER
  AGENCY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BrandKit {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  logoUrl      String?
  colors       Json     // { primary, secondary, accent, bg, text, hi }
  fontHeadings String?
  fontBody     String?
  bio          String?
  crafts       Json     // string[]
  specialties  Json     // string[]
}

model Asset {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  url       String
  kind      AssetKind
  tags      Json     // string[]
  createdAt DateTime @default(now())
}

enum AssetKind {
  image
  pdf
}

model Template {
  id          String       @id @default(cuid())
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  kind        TemplateKind
  title       String
  contentJSON Json
  size        String?
  variables   Json         // string[]
}

enum TemplateKind {
  social
  print
  campaign
}

model Post {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  title       String
  channel     Channel
  images      Json       // string[]
  caption     String?
  hashtags    Json       // string[]
  scheduledAt DateTime?
  status      PostStatus @default(draft)
  createdAt   DateTime   @default(now())
}

enum Channel {
  instagram
  facebook
  tiktok
  manual
}

enum PostStatus {
  draft
  scheduled
  sent
}

model Page {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  slug      String   @unique
  published Boolean  @default(false)
  blocks    Json
}

model Message {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  fromEmail String
  name      String
  subject   String?
  body      String
  createdAt DateTime @default(now())
  readAt    DateTime?
}

model Link {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  slug      String   @unique
  targetUrl String
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
}

model Metric {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  kind   String
  value  Int      @default(0)
  date   DateTime
}

model ProductLite {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  priceCents  Int      // store RON as integer cents
  currency    String   @default("RON")
  description String?
  imageUrl    String?
} 